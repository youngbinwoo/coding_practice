1) 큐의 활용
  : 자료를 생성하는 작업과 그 자료를 이용하는 작업이 비동기적으로 일어나는 경우
  : 자료를 생성하는 작업이 여러 곳에서 일어나는 경우
  : 자료를 이용하는 작업이 여러 곳에서 일어나는 경우
  : 자료를 생성하는 작업과 그 자료를 이용하는 작업이 양쪽 다 여러 곳에서 일어나는 경우
  : 자료를 처리하여 새로운 자료를 생성하고, 나중에 그 자료를 또 처리해야 하는 작업의 경우
  
2) 환형 큐
  : 정해진 개수의 저장 공간을 빙 돌려가며 이용
    Q.enqueue(A)
    Q.enqueue(B)
    Q.enqueue(C)
    r1=Q.dequeue() ->A
    Q.enqueue(D)
    r2=Q.dequeue() ->B
  
  큐가 가득 차면? : 더이상 원소를 넣을 수 없음(큐 길이를 기억하고 있어야함)
  
3) 환형 큐의 추성적 자료구조 구현
   
   연산의 정의
   size() : 현재 큐에 들어있는 데이터 원소의 수를 구함
   isEmpty() : 현재 큐가 비어 있는지를 판단
   isFull() : 큐에 데이터 원소가 꽉 차 있는지를 판단
   enqueue(x) : 데이터 원소x를 큐에 추가
   dequeue() : 큐의 맨 앞에 저장된 데이터 원소를 제거(또한, 반환)
   peek() : 큐의 맨 앞에 저장된 데이터 원소를 반환(제거하지 않음)
   
4) 배열로 구현한 환형 큐
   :front와 rear를 적절히 계산하여 배열을 환형으로 재활용
   :만약 지금 G를 입력했을 때, G가 rear. 가장 처음 입력된 것이 F일 때, F는 front
   

문제)
Python 의 내장 데이터형인 리스트 (list) 를 이용하여 환형 큐의 추상적 자료 구조를 구현한
클래스 CircularQueue 를 완성하세요.
[참고] 함수 solution() 은 이 클래스의 구현과는 관계 없는 것이지만, 
문제가 올바르게 동작하는 데 필요해서 넣어 둔 것이니 무시해도 좋습니다.
또한, 실행 을 눌렀을 때 예시 테스트 케이스를 통과한다고 출력되는 것은 아무런 의미가 없습니다.

답)
class CircularQueue:

    def __init__(self, n):
        self.maxCount = n
        self.data = [None] * n
        self.count = 0
        self.front = -1
        self.rear = -1


    def size(self):
        return self.count

    def isEmpty(self):
        return self.count == 0

    def isFull(self):
        return self.count == self.maxCount

    def enqueue(self, x):
        if self.isFull():
            raise IndexError('Queue full')
        self.rear = (self.rear+1)%self.maxCount
        self.data[self.rear] = x
        self.count += 1

    def dequeue(self):
        if self.isEmpty():
            raise IndexError('Queue empty')
        self.front = (self.front+1)%self.maxCount
        x = self.data[self.front]
        self.count -= 1
        return x

    def peek(self):
        if self.isEmpty():
            raise IndexError('Queue empty')
        return self.data[(self.front+1)%self.maxCount]

def solution(x):
    return 0
   
   
