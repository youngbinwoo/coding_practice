1) 큐란?
   자료를 보관할 수 있는 선형구조
   단, 자료를 넣을 때에는 한 쪽 끝에서 밀어 넣어햐 하고 -> 인큐 연산
   꺼낼 때에는 반대 쪽에서 뽑아 꺼내야 하는 제약이 있음 -> 디큐 연산
   
   선입선출 특징을 가지는 선형 자료 구조(먼저 들어온 것을 먼저 써야함)
   
   ex, 영화관 줄, 대기 줄--> 먼저 선 사람이 먼저 서비스 받는 것
   

2) 큐의 동작
   초기에는 비어있는 큐          Q=Queue()
   데이터 원소 B를 큐에 추가     Q.enqueue(A)
                                 Q.enqueue(B)
   데이터 원소 꺼내기            r1=Q.dequeue() -->A가 꺼내짐
   
   --> 먼저 들어간 것이 먼저 나옴
   
3) 큐의 추상적 자료구조 구현
   (1) 배열을 이용하여 구현
       : python 리스트와 메서드들을 이용
   (2) 연결 리스트를 이용하여 구현
       : 이전 강의에서 마련한 양방향 연결 리스트 이용
       
4) 연산의 정의
   size() : 현재 큐에 들어있는 데이터 원소의 수를 구함
   isEmpty() : 현재 큐가 비어 있는지를 판단
   enqueue(x) : 데이터 원소x를 큐에 추가
   dequeue() : 큐의 맨 앞에 저장된 데이터 원소를 제거(또한, 반환)
   peek() : 큐의 맨 앞에 저장된 데이터 원소를 반환(제거하지 않음)
   
5) 배열로 구현한 큐의 연산 복잡도
   size() : O(1)
   isEmpty() : O(1)
   enqueue(x) : O(1)
   dequeue() : O(n)
   peek() : O(1)
   
6) 이중 연결 리스트로 큐를 구현   


문제)
   
   양방향 연결 리스트로 구현하는 큐
   
   양방향 연결 리스트를 활용하여 큐 (queue) 의 추상적 자료구조 (abstract data structure) 구현을 완성하세요.
   정의하고자 하는 큐의 추상적 자료구조는 class LinkedListQueue 로 구현됩니다. 
   이 문제는 해당 클래스의 메서드들의 구현을 빈칸 채우기 형태로 완성하는 것으로 되어 있으며, 
   이 클래스의 구현은 L120 부터 시작합니다.
   그 위에는 (LL1-117) 이 추상적 자료구조를 구현하기 위해서 이용할 class DoublyLinkedList 와,
   또한 여기서 이용하는 class Node 의 구현이 정의되어 있습니다. 
   이 코드는 이전의 양방향 연결 리스트 강의에서 다루어진 것과 완전히 동일합니다.
   정확성 테스트는 class LinkedListQueue 의 각 메서드가 올바르게 구현되어 있는지를 검사합니다. 
   코드 실행 을 눌렀을 때 예시 테스트 케이스를 통과하는 것은 아무런 의미가 없습니다.
   
답)

class LinkedListQueue:
    def __init__(self):
        self.data = DoublyLinkedList()

    def size(self):
        return self.data.getLength()

    def isEmpty(self):
        return self.data.getLength()==0

    def enqueue(self, item):
        node = Node(item)
        return self.data.insertAt(self.data.nodeCount+1, node)

    def dequeue(self):
        return self.data.popAt(1)

    def peek(self):
        return self.data.getAt(1).data
