1) 이진 트리의 추상적 자료구조
   연산의 정의
   size()-현재 트리에 포함되어 있는 노드의 수를 구함
   depth()- 현재 트리의 깊이를 구함
   traversal-중요, 정해진 순서대로 노드를 방문해서 처리함
  
2) 이진 트리의 구현-노드(Node)  
  
         data            Node
          _|_              -Data
         |   |             -Left Child
       left  right         -Right Child
       
  :구현하기 위해서는 root Node가 어느 것인지 알아야함
  :  size() ->재귀적인 방법으로 쉽게 구할 수 있음
     전체 이진 트리의 size()=left subtree의 size()+right subtree의 size()+1(자기자신)
          
3)  이진 트리의 구현-depth()
   :  재귀적인 방법으로 구할 수 있음
   : 전체 이진 트리의 depth()=left subtree의 depth()와 right subtree의 depth() 중 더 큰 것 +1
   
4) 이진 트리의 순회
   : 깊이 우선 순회
     : 중위 순회(in order) -  순회 순서 (1) Left subtree (2) 자기 자신 (3) Right subtree
     : 전위 순회 -(pre order)  (1) 자기 자신 (2) Left subtree (3) Right subtree
     : 후위 순회 - (1) Left subtree (2) Right subtree (3) 자기 자신
   : 넓이 우선 순회
   
문제1)
이진트리의 depth() 연산 구현

이미 주어진 코드 (class Node 와 class BinaryTree 에 의하여) 의 구조를 따르는 
이진 트리 (binary tree) 에 대하여, 트리의 깊이 (depth) 를 구하는 연산의 구현을 완성하세요.
초기  코드에 pass 로만 되어 있는 class Node 의 depth() 메서드와 class BinaryTree 의 depth() 메서드를 구현합니다. 
코드의 다른 부분은 수정할 필요가 없습니다.
참고로 할 수 있도록, 강의에서 소개한 size() 메서드들 (class Node 와 class BinaryTree 에 대해서) 을 그대로 두었습니다. 
문제로 주어진 depth() 연산도 매우 비슷한 식으로 구현할 수 있으니 참고로 삼으세요.
[참고] 실행 을 눌렀을 때 통과하는 것은 아무 의미 없습니다.
또한, solution() 함수는 테스트에 영향을 미치므로 수정하지 말고 그대로 두세요.

답)

class Node:

    def __init__(self, item):
        self.data = item
        self.left = None
        self.right = None


    def size(self):
        l = self.left.size() if self.left else 0
        r = self.right.size() if self.right else 0
        return l + r + 1


    def depth(self):        
        l = self.left.depth() if self.left else 0
        r = self.right.depth() if self.right else 0
        return max(l,r)+1

class BinaryTree:

    def __init__(self, r):
        self.root = r

    def size(self):
        if self.root:
            return self.root.size()
        else:
            return 0


    def depth(self):
        if self.root:
            return self.root.depth()
        else:
            return 0


def solution(x):
    return 0
    

문제2)
이진트리의 전위순회 연산 구현

이미 주어진 코드 (class Node 와 class BinaryTree 에 의하여) 의 구조를 따르는 이진 트리 (binary tree) 에 대하여, 
트리를 전위 순회 (preorder traversal) 하는 연산의 구현을 완성하세요.
초기 코드에 pass 로만 되어 있는 class Node 의 preorder() 메서드와 class BinaryTree 의 preorder() 메서드를 구현합니다. 
코드의 다른 부분은 수정할 필요가 없습니다.
참고로 할 수 있도록, 강의에서 소개한 inorder() 메서드들 (class Node 와 class BinaryTree 에 대해서) 을 그대로 두었습니다. 
문제로 주어진 preorder() 연산도 매우 비슷한 식으로 구현할 수 있으니 참고로 삼으세요.
[참고] 실행 을 눌렀을 때 통과하는 것은 아무 의미 없습니다.
또한, solution() 함수는 테스트에 영향을 미치므로 수정하지 말고 그대로 두세요.

답)
class Node:

    def __init__(self, item):
        self.data = item
        self.left = None
        self.right = None


    def inorder(self):
        traversal = []
        if self.left:
            traversal += self.left.inorder()
        traversal.append(self.data)
        if self.right:
            traversal += self.right.inorder()
        return traversal


    def postorder(self):
        traversal = []
        if self.left:
            traversal += self.left.postorder()
        if self.right:
            traversal += self.right.postorder()
        traversal.append(self.data)
        return traversal


class BinaryTree:

    def __init__(self, r):
        self.root = r


    def inorder(self):
        if self.root:
            return self.root.inorder()
        else:
            return []


    def postorder(self):
        if self.root:
            return self.root.postorder()
        else:
            return []



def solution(x):
    return 0

문제 3)
이미 주어진 코드 (class Node 와 class BinaryTree 에 의하여) 의 구조를 따르는 이진 트리 (binary tree) 에 대하여, 
트리를 후위 순회 (postorder traversal) 하는 연산의 구현을 완성하세요.
초기 코드에 pass 로만 되어 있는 class Node 의 postorder() 메서드와 class BinaryTree 의 postorder() 메서드를 구현합니다. 
코드의 다른 부분은 수정할 필요가 없습니다.
참고로 할 수 있도록, 강의에서 소개한 inorder() 메서드들 (class Node 와 class BinaryTree 에 대해서) 을 그대로 두었습니다. 
문제로 주어진 postorder() 연산도 매우 비슷한 식으로 구현할 수 있으니 참고로 삼으세요.
[참고] 실행 을 눌렀을 때 통과하는 것은 아무 의미 없습니다.
또한, solution() 함수는 테스트에 영향을 미치므로 수정하지 말고 그대로 두세요.

답) 문제 2 답

[출처: https://programmers.co.kr/learn/courses/57]
