내용

1) 추상적 자료구조
내부 구현은 숨겨두고 보이는 것들 두 가지(Data, a set of operations) 제공
  Data: 예: 정수, 문자열 ..
  A set of operations : 삽입, 삭제, 순회 ...
                        정렬, 탐색

2)기본적인 연결 리스트
Node 내의 데이터는 다른 구조로 이루어질 수 있음 
예: 문자열, 레코드,,...

class Node:
    def __init__(self,item):
        self.data=item
        self.next=None
 
 class LinkedList:
     def __init__(self):
         self.nodecount=0
         self.head=None
         self.tail=None
         -->비어있는 연결 리스트
         
3) 연산 정의 

1, 특정 원소 참조 (K번째)
2, 리스트 순회
3, 길이 얻어내기
4, 원소 삽입
5, 원소 삭제
6, 두 리스트 합치기

4) 특정 원소 참조

*67(1,Head) -> 34(2) -> 58(3,Tail) 
: 앞으로는 0부터 시작하지 않는게 코드짜기 편하다

*k 번째 node 찾기
class LinkedList:
    def getAt(self,pos):
        if pos<=0 or pos>self.nodecount:
            return None
        i=1
        curr=self.head   #연결 리스트의 첫번째 코드를 가르치도록 함
        while i<pos:
            curr=curr.next
            i+=1
        return curr
        
  5) 배열과 비교한 연결 리스트
  
  저장공간 - 배열(연속한 위치), 연결 리스트(임의의 위치)
  특정 원소 지칭- 배열(매우 간편,O(1))->index , 연결 리스트 (선형탐색과 유사,O(n))
  
  
 문제)
 
 제 7 강에서 소개된 추상적 자료구조로 LinkedList 라는 이름의 클래스가 정의되어 있다고 가정하고, 
 이 리스트를 처음부터 끝까지 순회하는 메서드 traverse() 를 완성하세요.
메서드 traverse() 는 리스트를 리턴하되, 
이 리스트에는 연결 리스트의 노드들에 들어 있는 데이터 아이템들을 연결 리스트에서의 순서와 같도록 포함합니다. 
예를 들어, LinkedList L 에 들어 있는 노드들이 43 -> 85 -> 62 라면, 올바른 리턴 값은 [43, 85, 62] 입니다.
이 규칙을 적용하면, 빈 연결 리스트에 대한 순회 결과로 traverse() 메서드가 리턴해야 할 올바른 결과는 [] 입니다.
[참고] 실행 을 눌렀을 때 통과하는 것은 아무 의미 없습니다.


답)

class Node:
    def __init__(self, item):
        self.data = item
        self.next = None

class LinkedList:
    def __init__(self):
        self.nodeCount = 0
        self.head = None
        self.tail = None

    def getAt(self, pos):
        if pos < 1 or pos > self.nodeCount:
            return None
        i = 1
        curr = self.head
        while i < pos:
            curr = curr.next
            i += 1
        return curr

    def traverse(self):
        ans=[]
        curr = self.head
        while curr !=None:
            ans.append(curr.data)
            curr = curr.next
        return ans



# 이 solution 함수는 그대로 두어야 합니다.
def solution(x):
    return 0
 
 
  
  

