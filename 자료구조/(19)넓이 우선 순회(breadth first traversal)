1) 이진 트리의 순회
   : 깊이 우선 순회
         : 중위 순회
         : 전위 순회
         : 후위 순회
    
    : 넓이 우선 순회     
    
2) 넓이 우선순회
   : 원칙
        : 수준이 낮은 노드를 우선으로 방문
        : 같은 수준의 노드들 사이에는
               부모 노드의 방문 순서에 따라 방문
               왼쪽 자식 노드를 오른쪽 자식보다 먼저 방문
               
         -> 재귀적(recursive) 방법이 적합한가?  적합하지 않음
         
   : 한 노드를 방문했을 때, 나중에 방문할 노드들을 순서대로 기록해 두어야함
     ->큐를 이용하면 어떨까?
     
3) 넓이 우선 순회 알고리즘 구현-> 하나씩 노드를 방문하면서 큐에다가 원소를 쎃는다

   (1) (초기화) traversal <- 빈 리스트, q <- 빈 큐
   (2) 빈 트리가 아니면, root node를 큐에 추가 (enqueue)
   (3) q가 비어 있지 않은 동안 하나씩 node를 꺼내서 처리
        (3)-1, node<- q에서 원소를 추출(dequeue)
        (3)-2, node를 방문
        (3)-3, node의 왼쪽, 오른쪽 자식(있으면) 들을 q에 추가
   (4) q가 빈 큐가 되면 모든 노드 방문 완료   
   

문제)
이진 트리의 넓이 우선 순회
이진 트리를 구현한 클래스인 class BinaryTree 에 대하여 넓이 우선 순회 (breadth first traversal) 를 
구현하는 메서드 bft() 를 완성하세요.
class ArrayQueue 는 배열 (python list) 을 이용하여 구현한 큐 (queue) 의 추상적 자료구조입니다. 
이것을 이용하여 넓이 우선 순회 알고리즘을 구현하세요.
[참고 1] solution() 함수의 구현은 그대로 두세요. 이것을 없애면 테스트가 되지 않습니다.
[참고 2] 코드 실행 을 눌렀을 때 통과하는 것은 아무런 의미가 없습니다

답)

class ArrayQueue:

    def __init__(self):
        self.data = []

    def size(self):
        return len(self.data)

    def isEmpty(self):
        return self.size() == 0

    def enqueue(self, item):
        self.data.append(item)

    def dequeue(self):
        return self.data.pop(0)

    def peek(self):
        return self.data[0]


class Node:

    def __init__(self, item):
        self.data = item
        self.left = None
        self.right = None


class BinaryTree:

    def __init__(self, r):
        self.root = r


    def bft(self):
        q=ArrayQueue()
        traverse=[]
        if self.root==None:
            return traverse
        else:
            q.enqueue(self.root)
            while not q.isEmpty():
                ans=q.dequeue()
                traverse.append(ans.data)
                if ans.right and ans.left:
                    q.enqueue(ans.left)
                    q.enqueue(ans.right)
                elif ans.left:
                    q.enqueue(ans.left)
                elif ans.right:
                    q.enqueue(ans.right)
        return traverse


def solution(x):
    return 0

   

     
         
         
         
         
