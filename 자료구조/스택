1) 스택
  자료를 보관할 수 있는 선형구조
  단, 데이터를 넣을 때에는 한 쪽 끝에서 밀어 넣어야 하고 -> 푸시 연산
  꺼낼 때에는 같은 쪽에서 뽑아 꺼내야 하는 제약이 있음 -> 팝 연산
  
  후입선출 특징을 가지는 선형 자료구조
  
2) 스택의 동작
   *초기 상태: 비어 있는 스택
    S=Stack()
   *데이터 원소 A를 스택에 추가
    S.push(A)
   *데이터 원소 B를 스택에 추가
    S.push(B)
   *데이터 원소 꺼내기
    r1=S.pop()
    r2=S.pop()
    
3) 스택에서 발생하는 오류
   : 비어 있는 스택에서 데이터 원소를 꺼내려 할 때
     -> 스택 언더플로우
     
   : 꽉 찬 스택에 데이터 원소를 넣으려고 할 때
     -> 스택 오버플로우
     
4) 스택의 추상적 자료구조 구현
   1) 배열을 이용하여 구현
      : python 리스트와 메서드들을 이용
   2) 연결 리스트를 이용하여 구현
      : 지난 강의에서 마련한 양방향 연결 리스트 이용
   3) 연산의 정의
      : size() - 현재 스택에 들어 있는 데이터 원소의 수를 구함
      : isEmpty() - 현재 스택이 비어 있는지를 판단
      : push(x) - 데이터 원소 x를 스택에 추가
      : pop() - 스택의 맨 위에 저장된 데이터 원소를 제거 (또한, 반환)
      : peek() - 스택의 맨 위에 저장된 데이터 원소를 반환 (제거하지 않음)
      
5) 배열로 구현한 스택
from doublylinkedlist import Node
from doublylinkedlist import DoublyLinkedList

   class ArrayStack:
       def __init__(self):
		       self.data = []        

	     def size(self):               #스택의 크기를 리턴
		       return len(self.data)

	     def isEmpty(self):            #스택이 비어 있는지 판단
		       return self.size() == 0

	     def push(self, item):         #데이터 원소를 추가
		       self.data.append(item)

	     def pop(self):                #데이터 원소를 삭제(리턴)
		       return self.data.pop()

	     def peek(self):               #스택의 꼭대기 원소 반환
		       return self.data[-1]
      
      
   class LinkedListStack:
       	def __init__(self):
		        self.data = DoublyLinkedList()

	      def size(self):
		        return self.data.getLength()

	      def isEmpty(self):
		        return self.size() == 0

	      def push(self, item):
		        node = Node(item)
		        self.data.insertAt(self.size() + 1, node)

	      def pop(self):
		        return self.data.popAt(self.size())

	      def peek(self):
		        return self.data.getAt(self.size()).data   
  
6) 라이브러리 사용
   >>from pythonds.basic stack import Stack
   >>S=Stack()
   >>dir(S)
   
7) 연습문제- 수식의 괄호 유효성 검사
   올바른 수식
   (A+B)
   {(A+B)*C}
   [(A+B)*(C+D)]
   
   올바르지 않은 수식
   (A+B
   A+B)
   {A*(B+C})
   [(A+B)*(C+D)}
   
   알고리즘 설계- 수식을 왼쪽부터 한 글자쓸 읽어서:
   -여는 괄호: ( 또는 { 또는 [ -를 만나면 스택에 푸시
   -닫는 괄호: ) 또는 } 또는 ] -를 만나면:
    - 스택이 비어 있면 올바르지 않은 수식
    - 스택에서 POP, 쌍을 이루는 여는 괄호인지 검사
       - 맞지 않은면 올바르지 않은 수식
       
문제 1)
수식의 괄호 검사 (스택)
소괄호: ( )
중괄호: { }
대괄호: [ ]
를 포함할 수 있는 수식을 표현한 문자열 expr 이 인자로 주어질 때, 
이 수식의 괄호가 올바르게 여닫혀 있는지를 판단하는 함수 solution() 을 완성하세요.
이 함수는 수식의 괄호가 유효하면 True 를, 그렇지 않으면 False 를 리턴합니다.
스택을 활용하여 수식 내의 괄호 여닫음의 유효성을 검사하는 알고리즘에 대해서는 동영상 강의 내용을 참고하세요.

답)
def solution(expr):
    match = {
        ')': '(',
        '}': '{',
        ']': '['
    }
    S = ArrayStack()
    for c in expr:
        if c in '({[':
	   S.push(c)
        elif c in match:
            if S.isEmpty():
                return False
            else:
                t=S.pop()
                if t != match[c]:
                    return False
    return S.isEmpty()




    

   
   
   
      
