1) 연결 리스트 연산_원소의 삽입
   def insertAt(self,pos,newNode):
   
   :pos가 가르키는 위치에 (1<=pos<=nodeCount+1)
   newNode를 삽입하고
   성공/실패에 따라 True/False 를 리턴
   
   L.insertAt(pos,newNode)
   
   def insertAt(self,pos,newNode):
       if pos<1 or pos>self.nodeCount+1:
           return False
        if pos=1:
            newNode.next=self.head
            self.head=newNode
        else:
           prev=self.getAt(pos-1)
           newNode.next=prev.next
           prev.next=newNode
           
        if pos=self.nodeCount+1:
            self.tail=newNode
            
        self.nodeCount+=1
        return True
            
        
       
       -> 코드 구현 주의사항
       (1) 삽입하려는 위치가 리스트 맨 앞일 때
           prev 없음
           Head 조정 필요
       (2) 삽입하려는 위치가 리스트 맨 끝일 때
           Tail 조정 필요
           

2) 삽입하려는 위치가 리스트 맨 끝일 때, pos=self.nodeCount+1

   
   def insertAt(self,pos,newNode):
       if pos<1 or pos>self.nodeCount+1:
           return False
        if pos=1:
            newNode.next=self.head
            self.head=newNode
        else:
            if pos= self.nodeCount+1:
                prev=self.tail
            else:
                prev=self.getAt(pos-1)
                ewNode.next=prev.next
                prev.next=newNode
           
        if pos=self.nodeCount+1:
            self.tail=newNode
            
        self.nodeCount+=1
        return True
        
3) 실습

class Node:
    def __init__(self, item):
        self.data = item
        self.next = None

class LinkedList:
    def __init__(self):
        self.nodeCount = 0
        self.head = None
        self.tail = None

    def getAt(self, pos):
        if pos < 1 or pos > self.nodeCount:
            return None
        i = 1
        curr = self.head
        while i < pos:
            curr = curr.next
            i += 1
        return curr
        
    def __repr__(self):
        if self.nodeCount==0:
           return 'LinkedList:empty'
        s=''
        curr=self.head
        while curr is not None:
            s+=repr(curr.data)
            if curr.next is not None:
                s+='->'
            curr=curr.next
        return s    
 
   def insertAt(self,pos,newNode):
       if pos<1 or pos>self.nodeCount+1:
           return False
        if pos=1:
            newNode.next=self.head
            self.head=newNode
        else:
            if pos= self.nodeCount+1:
                prev=self.tail
            else:
                prev=self.getAt(pos-1)
                ewNode.next=prev.next
                prev.next=newNode
           
        if pos=self.nodeCount+1:
            self.tail=newNode
            
        self.nodeCount+=1
        return True
   
    *실습 코드
     a=Node(67)
     b=Node(34)
     c=Node(28)
     L=Linkedlist()
     L  -> Linkedlist: empty
     L.insertAt(1,a)->True
     L.insertAt(2,b)->True
     L (67->34)
     L.insertAt(1,c)
     L (28->67->34)


4) 연결 리스트 원소 삽입의 복잡도
   
   맨 앞에 삽입하는 경우 : O(1)
   중간에 삽입하는 경우:  O(n)
   맨 끝에 삽입하는 경우: O(1)   
   

5) 연결 리스트 연산_원소의 삭제
   def popAt(self,pos):
   
   pos가 가리키는 위치의 (1<=pos<=nodeCount)
   node를 삭제하고
   그 node의 데이터를 리턴
   
   
6) 코드 구현 주의사항
   (1) 삭제하려는 node가 맨 앞의 것일 때
   ->prev 없음
   ->Head 조정 필요
   
   (2) 리스트 맨 끝의 nodeㄹㄹ 삭제할 때
   ->Tail 조정 필요
   
   * 유일한 노드를 삭제할 때? -> 이 두 조건에 의해 처리되는가?
   *그런데 잠깐, 삭제하려는 node가 마지막 node일 때, 즉 pos==nodeCount 인 경우
     curr==tail
     하지만 한 번에 처리할 수 없다. (prev를 찾을 방법이 없으므로 앞에서부터 찾아와야함)
     
7) 연결 리스트 원소 삭제의 복잡도
   
   맨 앞에 삭제하는 경우 : O(1)
   중간에 삭제하는 경우:  O(n)
   맨 끝에 삭제하는 경우: O(n)        
   
8) 연결 리스트 연산_ 두 리스트의 연결
   def concat(self,L):
   
   연결 리스트 self의 뒤에 
   또다른 연결 리스트인 L을 이어붙임
   
   def concat(self,L):
       self.tail.next=L.head
       if L.tail:
           self.tail=L.tail
       self.nodeCount+=L.nodeCount
       
       
문제) 연결 리스트 노드 삭제

제 8 강에서 소개된 추상적 자료구조 LinkedList 클래스의 메서드로서 popAt() 메서드를 강의 내용에 소개된 요구조건을 만족시키도록 구현하세요.
초기 코드로 들어 있는 것은 solution() 함수를 포함하여 다른 부분은 수정하지 말고, def popAt(self, pos): 의 메서드 몸체만 구현하세요.
만약, 인자로 주어진 pos 가 올바른 범위의 값을 가지지 않는 경우에는 IndexError exception 을 발생시키도록 합니다. 
이렇게 하기 위한 코드는 raise IndexError 입니다.
*** 2020년 3월 23일, 학습자의 질문에 답하면서 보니 특정한 경우의 정확성을 올바르게 검증하지 못하는 경우가 발견되어 
테스트 케이스 4 번을 추가했습니다.


       
       
