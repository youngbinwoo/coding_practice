1) 양방향 연결 리스트
   한 쪽으로만 링크를 연결하지 말고, 양쪽으로! 
   -> 앞으로도(다음 node) 뒤로도 (이전node) 진행 가능
   
   *Node의 구조를 확장해야함
   
     class Node:

      def __init__(self, item):
          self.data = item
          self.prev = None
          self.next = None
          
   * 리스트 처음과 끝에 dummy node를 두자
     ->데이터를 담고 있는 node들은 모두 같음 모양
     
      class DoublyLinkedList:

      def __init__(self):
        self.nodeCount = 0
        self.head = Node(None) #
        self.tail = Node(None) #
        self.head.prev = None
        self.head.next = self.tail #
        self.tail.prev = self.head #
        self.tail.next = None
        
   * 리스트 순회
     def traverse(self):
        result = []
        curr = self.head
        while curr.next.next: #
            curr = curr.next
            result.append(curr.data)
        return result
        
   * 리스트 역순회
     def reverse(self):
        result = []
        curr = self.tail
        while curr.prev.prev: #
            curr = curr.prev
            result.append(curr.data)
        return result
        
   * 원소의 삽입     
     L.insertAfter(prev,nexNode)
     
     next=prev.next라고 지정하여 양쪽 data를 모두 얻어낸다.
     newNode.prev는 prev로 지정하고
     newNode.next는 next로 지정한다.
     이후, 기존의 rink를 끊는다
     prev.next는 newNode로 둔다
     next.prev는 newNode로 둔다
     nodeCoun+=1
     
    def insertAfter(self, prev, newNode):
        next = prev.next
        newNode.prev = prev
        newNode.next = next
        prev.next = newNode
        next.prev = newNode
        self.nodeCount += 1
        return True
        
   *특정 원소 얻어내기
    def getAt(self, pos):
    if pos < 0 or pos > self.nodeCount:
        return None

    if pos > self.nodeCount // 2:
        i = 0
        curr = self.tail
        while i < self.nodeCount - pos + 1:
            curr = curr.prev
            i += 1
        else:
            i = 0
            curr = self.head
            while i < pos:
                curr = curr.next
                i += 1

        return curr
        
        :만약 pos가 nodecount의 절반보다 뒤쪽이면 뒤쪽부터 찾아가는 코드를 구현한다.
        
        : 선형시간 알고리즘
   
   * 원소의 삽입
     : 리스트 마지막에 원소를 삽입하면?
     
     
   * 연습문제 - 양방향 연결 리스트 메서드 구현
     
     def insertBefore(self,next,newNode)
     
     def popAfter(self,prev)
     def popBefore(self,next)
     def popAt(self,pos)
     
     def concat(self,L)
     
     -> 맨 마지막 원소를 뽑는 것이 시간이 덜 걸린다.
     
     
문제 1)
 양방향 연결 리스트 역방향 순회

 제 10 강에서 소개된 추상적 자료구조 DoublyLinkedList 에 대하여, 
 또한 강의 내용에서 언급한 reverse() 메서드를 구현하세요.
 이 reverse() 메서드는 양방향 연결 리스트를 끝에서부터 시작해서 맨 앞에 도달할 때까지 (tail 방향에서 head 방향으로) 순회하면서,
 방문하게 되는 node 에 들어 있는 data item 을 순회 순서에 따라 리스트에 담아 리턴합니다.
 예를 들어, DoublyLinkedList L 에 들어 있는 노드들이 43 -> 85 -> 62 라면, 올바른 리턴 값은 [62, 85, 43] 입니다.
 이 규칙을 적용하면, 빈 연결 리스트에 대한 역방향 순회 결과로 reverse() 메서드라 리턴해야 할 올바른 결과는 [] 입니다.
 
답)
  class Node:

    def __init__(self, item):
        self.data = item
        self.prev = None
        self.next = None


class DoublyLinkedList:

    def __init__(self):
        self.nodeCount = 0
        self.head = Node(None)
        self.tail = Node(None)
        self.head.prev = None
        self.head.next = self.tail
        self.tail.prev = self.head
        self.tail.next = None


    def reverse(self):
        ans=[]
        curr=self.tail
        while curr.prev.prev!=None:
            curr=curr.prev
            ans.append(curr.data)
        return ans    


    def getAt(self, pos):
        if pos < 0 or pos > self.nodeCount:
            return None

        if pos > self.nodeCount // 2:
            i = 0
            curr = self.tail
            while i < self.nodeCount - pos + 1:
                curr = curr.prev
                i += 1
        else:
            i = 0
            curr = self.head
            while i < pos:
                curr = curr.next
                i += 1

        return curr


    def insertAfter(self, prev, newNode):
        next = prev.next
        newNode.prev = prev
        newNode.next = next
        prev.next = newNode
        next.prev = newNode
        self.nodeCount += 1
        return True


    def insertAt(self, pos, newNode):
        if pos < 1 or pos > self.nodeCount + 1:
            return False

        prev = self.getAt(pos - 1)
        return self.insertAfter(prev, newNode)


def solution(x):
    return 0
     
문제 2)
  양방향 연결 리스트 노드 삽입

제 10 강에서 소개된 추상적 자료구조 DoublyLinkedList 의 메서드로 insertBefore() 를 구현하세요.
이 insertBefore() 메서드에는 두 개의 인자가 주어지는데, next 는 어느 node 의 앞에 새로운 node 를 삽입할지를 지정하고, 
newNode 는 삽입할 새로운 node 입니다.
강의 내용에서 소개된 insertAfter() 메서드의 구현과 매우 유사하게 할 수 있습니다.

답)

class Node:

    def __init__(self, item):
        self.data = item
        self.prev = None
        self.next = None


class DoublyLinkedList:

    def __init__(self):
        self.nodeCount = 0
        self.head = Node(None)
        self.tail = Node(None)
        self.head.prev = None
        self.head.next = self.tail
        self.tail.prev = self.head
        self.tail.next = None


    def traverse(self):
        result = []
        curr = self.head
        while curr.next.next:
            curr = curr.next
            result.append(curr.data)
        return result


    def insertBefore(self, next, newNode):
        prev=next.prev
        newNode.next=next
        newNode.prev=prev
        prev.next=newNode
        next.prev=newNode
        self.nodeCount+=1
        return True
        

def solution(x):
    return 0
    

문제 3)
  
   양방향 연결 리스트 노드 삭제

    DoublyLinkedList 에 대하여 node 의 삭제 연산에 관련한 아래와 같은 메서드들을 구현하세요.
    popAfter()
    popBefore()
    popAt()
    popAfter(prev) 는 인자 prev 에 의하여 주어진 node 의 다음에 있던 node 를 삭제하고, 
    popBefore(next) 는 인자 next 에 의하여 주어진 node 의 이전에 있던 node 를 삭제합니다. 
    그리고 삭제되는 node 에 담겨 있던 data item 을 리턴합니다.
    popAt(pos) 는 인자 pos 에 의하여 지정되는 node 를 삭제하고 그 node 에 담겨 있던 data item 을 리턴하는데, 
    위 popAfter() 또는 popBefore() 를 호출하여 이용하는 방식으로 구현하세요. 
    또한, 만약 인자 pos 가 올바른 범위 내에 있지 않은 경우에는 raise IndexError 를 이용하여 IndexError exception 을 일으키도록 구현하세요.
    테스트 케이스 1-3 은 각각 (1) popAfter(), (2) popBefore(), (3) popAt() 메서드의 올바른 동작을 검증하는 케이스입니다.
    
답)
class Node:

    def __init__(self, item):
        self.data = item
        self.prev = None
        self.next = None


class DoublyLinkedList:

    def __init__(self):
        self.nodeCount = 0
        self.head = Node(None)
        self.tail = Node(None)
        self.head.prev = None
        self.head.next = self.tail
        self.tail.prev = self.head
        self.tail.next = None


    def traverse(self):
        result = []
        curr = self.head
        while curr.next.next:
            curr = curr.next
            result.append(curr.data)
        return result


    def getAt(self, pos):
        if pos < 0 or pos > self.nodeCount:
            return None

        if pos > self.nodeCount // 2:
            i = 0
            curr = self.tail
            while i < self.nodeCount - pos + 1:
                curr = curr.prev
                i += 1
        else:
            i = 0
            curr = self.head
            while i < pos:
                curr = curr.next
                i += 1

        return curr


    def insertAfter(self, prev, newNode):
        next = prev.next
        newNode.prev = prev
        newNode.next = next
        prev.next = newNode
        next.prev = newNode
        self.nodeCount += 1
        return True


    def insertAt(self, pos, newNode):
        if pos < 1 or pos > self.nodeCount + 1:
            return False

        prev = self.getAt(pos - 1)
        return self.insertAfter(prev, newNode)


    def popAfter(self, prev):
        curr=prev.next
        next=curr.next
        prev.next=next
        next.prev=prev
        self.nodeCount -= 1
        return curr.data

    def popBefore(self, next):
        curr=next.prev
        prev=next.prev.prev
        prev.next=next
        next.prev=prev
        self.nodeCount -= 1
        return curr.data
    
    def popAt(self, pos):
          if pos<1 or pos>self.nodeCount:
              raise IndexError
          prev=self.getAt(pos-1)
          curr=prev.next
          next=curr.next
          if pos>self.nodeCount//2:
              return self.popAfter(prev)
          else:
              return self.popBefore(next) 

def solution(x):
    return 0


문제 4)

     양방향 연결 리스트의 병합

제 10 강에서 소개된 추상적 자료구조 DoublyLinkedList 에 대하여 
두 개의 양방향 연결 리스트를 앞뒤로 이어 붙이는 메서드 concat() 을 구현하세요.
예를 들어, 양방향 연결 리스트 L1 에는 1 -> 2 -> 3 의 원소가 순서대로 들어 있고, 
또다른 양방향 연결 리스트 L2 에는 4 -> 5 의 순서로 원소가 들어 있을 때, 
메서드 호출 L1.concat(L2) 의 결과로 L1 은 1 -> 2 -> 3 -> 4 -> 5 의 양방향 연결 리스트가 됩니다. 
물론, L1 또는 L2 또는 둘 다가 비어 있는 양방향 연결 리스트인 경우도 고려되도록 코드를 작성해야 합니다.

답)


[출처:https://programmers.co.kr/learn/courses/57/lessons/13782]



     
     
   

     
   
     
     
     
     
     
    
        
        
     

     
   
        
        

   
   
